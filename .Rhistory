nom_fichier_align_orf = paste(seq.dir, "orf_align.fasta", sep="/")
nb_cycle = as.numeric(arg[which(arg == "-c")+1])
nb_individu = as.numeric(arg[which(arg == "-p")+1])
name_file = arg[which(arg == "-o")+1]
command=grepl("-a",arg)
if (command == 0 ){
a = 0.0002
}else {
a = as.numeric(arg[which(arg == "-a")+1])}
b = a * 1/4
alpha = a
subs = as.numeric(arg[which(arg == "-subs")+1])
transpo = as.numeric(arg[which(arg == "-transpo")+1])
del = as.logical(arg[which(arg == "-del")+1])
command=grepl("-i",arg)
if (command == 0 ){
input_file = paste(seq.dir, "hsmar1.fasta", sep="/")
}else {
input_file = arg[which(arg == "-i")+1]}
source(paste(script.dir, "script.r", sep="/"))
# Appels gÃ©nÃ©raux ---------------------------------------------------------
adn = chargement_sequence(input_file)
mat = creation_matrice_kimura(a,b)
multipal_itr = chargement_align_itr(nom_fichier_align_itr)
matpro_itr = creation_profil_itr(multipal_itr)
multipal_orf = chargement_align_orf(nom_fichier_align_orf)
matpro_orf = creation_profil_orf(multipal_orf)
score_moyen_profil_align_itr = calcul_score_moyen_profil_align_itr(multipal_itr,matpro_itr)
score_moyen_profil_align_orf = calcul_score_moyen_profil_align_orf(multipal_orf,matpro_orf)
if(is.na(alpha) == FALSE )mat = creation_matrice_kimura(alpha, 1/4 * alpha)
if(is.na(input_file) == FALSE ) adn = chargement_sequence(input_file)
global = list (adn, mat, multipal_itr, matpro_itr, multipal_orf, matpro_orf, score_moyen_profil_align_itr, score_moyen_profil_align_orf)
names(global) = names(global) = c("adn", "mat", "multipal_itr", "matpro_itr", "multipal_orf", "matpro_orf", "score_moyen_profil_align_itr", "score_moyen_profil_align_orf")
#}
if (is.na(subs) == FALSE){
probindel = subs
}
if (is.na(transpo) == FALSE){
score_transpos_init = transpo
}
if (length(name_file) == 0){
name_file = "Simul1"
}
sim_result = simul(nb_cycle, name_file, del,nb_individu)
sauvegarde(sim_result, name_file)
load("C:/Users/julia/Desktop/dnds.RData")
library(ape)
library(seqinr)
options(warn=-1)
adn=list()
orf=list()
nameOrf = list()
debutInit = as.numeric(strsplit(data[1,"Position_orf"]," ")[[1]][1])
finInit = as.numeric(strsplit(data[1,"Position_orf"]," ")[[1]][2])
adn[1] = substring(stock_frame_list[[2]][1],debutInit,finInit)
testd=list()
testf = list()
testd[1]=debutInit
testf[1]=finInit
orf = adn
nameOrf[1]="Seq1"
l=list()
l[1]=length(as.character(orf[[1]][1]))
for (s in 2:length(stock_frame_list[[2]])){
debut = as.numeric(strsplit(data[s,"Position_orf"]," ")[[1]][1])
fin = as.numeric(strsplit(data[s,"Position_orf"]," ")[[1]][2])
testf[s]=fin
testd[s]=debut
errorData = FALSE
if( data[s,"Position_orf"]=="NA NA"){
adn[s]= paste(replicate(abs(finInit-debutInit)+1, "-"), collapse = "",sep='')
errorData= TRUE
} else if(debut > debutInit & fin >= finInit ){
adn[s]= paste(paste(replicate(abs(debut-debutInit), "-"), collapse = ""),substring(stock_frame_list[[2]][s],debut,finInit),collapse = "",sep = "" )
} else if(debut <= debutInit & fin < finInit){
adn[s]= paste(substring(stock_frame_list[[2]][s],debutInit,fin),paste(replicate(abs(finInit-fin), "-"), collapse = ""),collapse = "",sep="")
} else if(debut > debutInit & fin < finInit ){
adn[s]= paste(paste(replicate(abs(debut-debutInit), "-"), collapse = ""),substring(stock_frame_list[[2]][s],debut,fin),paste(replicate(abs(finInit-fin), "-"), collapse = ""),collapse = "",sep="")
} else {
adn[s] = substring(stock_frame_list[[2]][s],debutInit,finInit)
}
if(errorData==FALSE){
if(any(as.character(orf)==as.character(adn[s]))==TRUE){
nameOrf[which(as.character(orf)==as.character(adn[s]))]= paste(nameOrf[which(as.character(orf)==as.character(adn[s]))]," Seq",s,collapse = "",sep="")
} else {
orf = append(orf,adn[s])
nameOrf = append(nameOrf,paste("Seq",s,sep=""))
}
}
}
names(adn)=names(stock_frame_list[[2]])
names(orf)=nameOrf
orf=Filter(is.character,orf)
write.fasta(orf,names(orf), file.out = "orf", open = "w", as.string = TRUE)
dna <- read.dna(file = "orf", format = "fasta")
dnds=c()
a=2
write.fasta(list(orf[1],orf[a]),names(orf), file.out = "orf", open = "w", as.string = TRUE)
dna <- read.alignment(file = "orf", format = "fasta")
dnds[a-1] =kaks(dna)
dnds
dnds$ka
str(dnds)
dna
dnds =kaks(dna)
dnds
1/0
for(a in seq_along(along.with=orf)[-1]){
write.fasta(list(orf[1],orf[a]),names(orf), file.out = "orf", open = "w", as.string = TRUE)
dna <- read.alignment(file = "orf", format = "fasta")
dnds[a-1] = kaks(dna)$ka/kaks(dna)$ks
}
dnds
View(dnds)
a = 783
write.fasta(list(orf[1],orf[a]),names(orf), file.out = "orf", open = "w", as.string = TRUE)
dna <- read.alignment(file = "orf", format = "fasta")
kaks(dna)$ka
kaks(dna)$ks
for(a in seq_along(along.with=orf)[-1]){
write.fasta(list(orf[1],orf[a]),names(orf), file.out = "orf", open = "w", as.string = TRUE)
dna <- read.alignment(file = "orf", format = "fasta")
dnds[a-1] = kaks(dna)$ka/kaks(dna)$ks
}
#dnds[] <- lapply(dnds, function(x) { attributes(x) <- NULL; x })
names(dnds) = names(orf)[-1]
dnds[==Inf]
dnds[-which(dnds==inf)]
dnds[-which(dnds==Inf)]
names(dnds) = names(orf)[-1]
dnds = dnds[-which(dnds==Inf)]
dnds = dnds[-which(dnds<0)]
dnds[-which(dnds==Inf)]
dnds
2^2
load("C:/Users/julia/Desktop/dnds.RData")
library(ape)
library(seqinr)
options(warn=-1)
adn=list()
orf=list()
nameOrf = list()
debutInit = as.numeric(strsplit(data[1,"Position_orf"]," ")[[1]][1])
finInit = as.numeric(strsplit(data[1,"Position_orf"]," ")[[1]][2])
adn[1] = substring(stock_frame_list[[2]][1],debutInit,finInit)
testd=list()
testf = list()
testd[1]=debutInit
testf[1]=finInit
orf = adn
nameOrf[1]="Seq1"
l=list()
l[1]=length(as.character(orf[[1]][1]))
for (s in 2:length(stock_frame_list[[2]])){
debut = as.numeric(strsplit(data[s,"Position_orf"]," ")[[1]][1])
fin = as.numeric(strsplit(data[s,"Position_orf"]," ")[[1]][2])
testf[s]=fin
testd[s]=debut
errorData = FALSE
if( data[s,"Position_orf"]=="NA NA"){
adn[s]= paste(replicate(abs(finInit-debutInit)+1, "-"), collapse = "",sep='')
errorData= TRUE
} else if(debut > debutInit & fin >= finInit ){
adn[s]= paste(paste(replicate(abs(debut-debutInit), "-"), collapse = ""),substring(stock_frame_list[[2]][s],debut,finInit),collapse = "",sep = "" )
} else if(debut <= debutInit & fin < finInit){
adn[s]= paste(substring(stock_frame_list[[2]][s],debutInit,fin),paste(replicate(abs(finInit-fin), "-"), collapse = ""),collapse = "",sep="")
} else if(debut > debutInit & fin < finInit ){
adn[s]= paste(paste(replicate(abs(debut-debutInit), "-"), collapse = ""),substring(stock_frame_list[[2]][s],debut,fin),paste(replicate(abs(finInit-fin), "-"), collapse = ""),collapse = "",sep="")
} else {
adn[s] = substring(stock_frame_list[[2]][s],debutInit,finInit)
}
if(errorData==FALSE){
if(any(as.character(orf)==as.character(adn[s]))==TRUE){
nameOrf[which(as.character(orf)==as.character(adn[s]))]= paste(nameOrf[which(as.character(orf)==as.character(adn[s]))]," Seq",s,collapse = "",sep="")
} else {
orf = append(orf,adn[s])
nameOrf = append(nameOrf,paste("Seq",s,sep=""))
}
}
}
names(adn)=names(stock_frame_list[[2]])
names(orf)=nameOrf
orf=Filter(is.character,orf)
ka=c()
ks=c()
vaKaks = c()
V.kaks <- sapply(seq_along(ka), function(i) Vka[i]/ks[i]^2 + ka[i]^2 * Vks[i] / ks[i]^4
)
a = 2
write.fasta(list(orf[1],orf[a]),names(orf), file.out = "orf", open = "w", as.string = TRUE)
dna <- read.alignment(file = "orf", format = "fasta")
ka[a-1] = kaks(dna)$ka
ks[a-1]=kaks(dna)$ks
vaKaks = kaks(dna)$Vka/kaks(dna)$ks^2 + kaks(dna)$ka^2 * kaks(dna)$Vks / kaks(dna)$ks^4
vaKaks = kaks(dna)$Vka/kaks(dna)$ks^2 + kaks(dna)$ka^2 * kaks(dna)$Vks / kaks(dna)$ks^4
kaks(dna)$Vka
kaks(dna)$vka
vaKaks = kaks(dna)$vka/kaks(dna)$ks^2 + kaks(dna)$ka^2 * kaks(dna)$vks / kaks(dna)$ks^4
vaKaks
kaks(dna)$vka/kaks(dna)$ks^2
kaks(dna)$ka^2 * kaks(dna)$vks / kaks(dna)$ks^4
kaks(dna)$vks
kaks(dna)$ks^4
kaks(dna)$ka^2
kaks(dna)$vka/kaks(dna)$ks^2 + kaks(dna)$ka^2 * kaks(dna)$vks / kaks(dna)$ks^4
0/2
2/0
for(a in seq_along(along.with=orf)[-1]){
write.fasta(list(orf[1],orf[a]),names(orf), file.out = "orf", open = "w", as.string = TRUE)
dna <- read.alignment(file = "orf", format = "fasta")
ka[a-1] = kaks(dna)$ka
ks[a-1]=kaks(dna)$ks
vaKaks[a-1] = kaks(dna)$vka/kaks(dna)$ks^2 + kaks(dna)$ka^2 * kaks(dna)$vks / kaks(dna)$ks^4
}
vaKaks = vaKaks[-which(vaKaks==NA)]
names(ka) = names(orf)[-1]
names(ks) = names(orf)[-1]
kaks = list(ka,ks)
kaks
kaks[1]
kaks[1][1]
View(kaks)
kaks[[1]][1]
CaculDnds= function (data,stock_frame_list){ #data is a dataframe made with the output rdata of each simulation (stock_frame_list), more precisly  = as.data.frame(t(stock_frame_list[[1]][[1]])){
library(ape)
library(seqinr)
options(warn=-1)
adn=list()
orf=list()
nameOrf = list()
debutInit = as.numeric(strsplit(data[1,"Position_orf"]," ")[[1]][1])
finInit = as.numeric(strsplit(data[1,"Position_orf"]," ")[[1]][2])
adn[1] = substring(stock_frame_list[[2]][1],debutInit,finInit)
testd=list()
testf = list()
testd[1]=debutInit
testf[1]=finInit
orf = adn
nameOrf[1]="Seq1"
l=list()
l[1]=length(as.character(orf[[1]][1]))
for (s in 2:length(stock_frame_list[[2]])){
debut = as.numeric(strsplit(data[s,"Position_orf"]," ")[[1]][1])
fin = as.numeric(strsplit(data[s,"Position_orf"]," ")[[1]][2])
testf[s]=fin
testd[s]=debut
errorData = FALSE
if( data[s,"Position_orf"]=="NA NA"){
adn[s]= paste(replicate(abs(finInit-debutInit)+1, "-"), collapse = "",sep='')
errorData= TRUE
} else if(debut > debutInit & fin >= finInit ){
adn[s]= paste(paste(replicate(abs(debut-debutInit), "-"), collapse = ""),substring(stock_frame_list[[2]][s],debut,finInit),collapse = "",sep = "" )
} else if(debut <= debutInit & fin < finInit){
adn[s]= paste(substring(stock_frame_list[[2]][s],debutInit,fin),paste(replicate(abs(finInit-fin), "-"), collapse = ""),collapse = "",sep="")
} else if(debut > debutInit & fin < finInit ){
adn[s]= paste(paste(replicate(abs(debut-debutInit), "-"), collapse = ""),substring(stock_frame_list[[2]][s],debut,fin),paste(replicate(abs(finInit-fin), "-"), collapse = ""),collapse = "",sep="")
} else {
adn[s] = substring(stock_frame_list[[2]][s],debutInit,finInit)
}
if(errorData==FALSE){
if(any(as.character(orf)==as.character(adn[s]))==TRUE){
nameOrf[which(as.character(orf)==as.character(adn[s]))]= paste(nameOrf[which(as.character(orf)==as.character(adn[s]))]," Seq",s,collapse = "",sep="")
} else {
orf = append(orf,adn[s])
nameOrf = append(nameOrf,paste("Seq",s,sep=""))
}
}
}
names(adn)=names(stock_frame_list[[2]])
names(orf)=nameOrf
orf=Filter(is.character,orf)
ka=c()
ks=c()
vaKaks = c()
for(a in seq_along(along.with=orf)[-1]){
write.fasta(list(orf[1],orf[a]),names(orf), file.out = "orf", open = "w", as.string = TRUE)
dna <- read.alignment(file = "orf", format = "fasta")
ka[a-1] = kaks(dna)$ka
ks[a-1]=kaks(dna)$ks
}
#dnds[] <- lapply(dnds, function(x) { attributes(x) <- NULL; x })
names(ka) = names(orf)[-1]
names(ks) = names(orf)[-1]
kaks = list(ka,ks)
#dnds = dnds[-which(dnds==Inf)]
#dnds = dnds[-which(dnds<0)]
return(kaks)
}
stock_frame_list[[1]][[2]][[g]]
stock_frame_list[[1]][[2]]
stock_frame_list[[1]][[2]][100]
v = stock_frame_list[[1]][[2]][100]
v
v = unlist(stock_frame_list[[1]][[2]][100])
v
table(v)
v = table(unlist(stock_frame_list[[1]][[2]][100]))
v
v[1]
ka = kaks[[1]]
ks=kaks[[2]]
mean(rep(ka, v))
which(names(kaks)==names(v))
names(v)
names(ka)
names(unlist(ka))
which(names(ka)==names(v))
which(names(unlist(ka))==names(v))
names(v)
which(names(v)==names(v))
names(ka)
grep(v,ks)
ks[43]
v
grep(names(v),names(ks))
ks[767]
apply(v, function(x) grep(names(x),names(ks)))
lapply(v, function(x) grep(names(x),names(ks)))
lapply(v, grep(names(x),names(ks)))
lapply(v, grep(names(v),names(ks)))
lapply(v,FUN =  grep(names(v),names(ks)))
lapply(list(v), grep(names(v),names(ks)))
lapply(list(v), function(x) grep(names(x),names(ks)))
lapply(v, function(x) grep(names(x),names(ks)))
apply(v, function(x) grep(names(x),names(ks)))
list(v)
v[1]
as.list(v)
apply(as.list(v), function(x) grep(names(x),names(ks)))
lapply(as.list(v), function(x) grep(names(x),names(ks)))
as.list(v)[[2]]
as.list(v)[[3]]
names(as.list(v)[[3]])
names(v[[3]])
names(v[3])
sapply(v, function(x) grep(names(x),names(ks)))
i=2
index = append(index,grep(names(v[i]),names(ks)))
index = c()
index = append(index,grep(names(v[i]),names(ks)))
index
ka = kaks[[1]]
ks=kaks[[2]]
index = c()
v = table(unlist(stock_frame_list[[1]][[2]][100]))
for (i in length(v)){
index = append(index,grep(names(v[i]),names(ks)))
}
index
ka = kaks[[1]]
ks=kaks[[2]]
index = c()
v = table(unlist(stock_frame_list[[1]][[2]][100]))
for (i in length(v)){
index[i] = grep(names(v[i]),names(ks))
}
index
ks[780]
v
grep(names(v)[4],names(ks))
ka = kaks[[1]]
ks=kaks[[2]]
index = c()
v = table(unlist(stock_frame_list[[1]][[2]][100]))
for (i in length(v)){
index[i] = grep(names(v)[i],names(ks))
}
iindex
index
ka = kaks[[1]]
ks=kaks[[2]]
index = c()
v = table(unlist(stock_frame_list[[1]][[2]][100]))
for (i in 1:length(v)){
index[i] = grep(names(v)[i],names(ks))
}
index
ka = kaks[[1]]
ks=kaks[[2]]
index = c()
v = table(unlist(stock_frame_list[[1]][[2]][100]))
for (i in 1:length(v)){
names(index[i]) = grep(names(v)[i],names(ks))
index[i]=v[i]
}
ka = kaks[[1]]
ks=kaks[[2]]
index = c()
v = table(unlist(stock_frame_list[[1]][[2]][100]))
for (i in 1:length(v)){
index[i]=v[i]
names(index[i]) = grep(names(v)[i],names(ks))
}
iindex
iindex
index
names(index)
ka = kaks[[1]]
ks=kaks[[2]]
index = c()
v = table(unlist(stock_frame_list[[1]][[2]][100]))
for (i in 1:length(v)){
index[i] = grep(names(v)[i],names(ks))
}
rep(ka[index],v)
table(rep(ka[index],v))
ka = kaks[[1]]
ks=kaks[[2]]
index = c()
v = table(unlist(stock_frame_list[[1]][[2]][100]))
for (i in 1:length(v)){
index[i] = grep(names(v)[i],names(ks))
}
meankaks = mean(rep(ka[index],v)) / mean(rep(ks[index],v))
meankaks
dnds_per_simul = function(stock_frame,data,kaks){
ka = kaks[[1]]
ks=kaks[[2]]
index = c()
v = table(unlist(stock_frame_list[[1]][[2]][100]))
for (i in 1:length(v)){
index[i] = grep(names(v)[i],names(ks))
}
meankaks = mean(rep(ka[index],v)) / mean(rep(ks[index],v))
return(meankaks)
}
install.packages("huge")
install.packages("bnlearn")
library("huge")
library("bnlearn")
#################################################################
## TP Network inference // Dec 2020
## melina.gallopin@u-psud.fr
#################################################################
rm(list=ls())
## loading package huge
## install.packages("huge")
library(huge)
## loading bnlearn package
## install.packages("bnlearn")
library(bnlearn)
data(marks)
head(marks)
regul= rnorm(1)
regul= rnorm(100)
regul= rnorm(100)
cible1 = regul*3 + rnorm(1)
cible2 = regul*-4 + rnorm(1)
cor = cor.test(cible1,cible2)
cor
regul= rnorm(100)
cible1 = regul*3 + rnorm(1)
cible2 = regul*-4 + rnorm(1)
cor = cor.test(cible1,cible2)
cor$statistic
cor$estimate
regul= rnorm(100)
cible1 = regul*3 + rnorm(1)
cible2 = regul*3 + rnorm(1)
cor = cor.test(cible1,cible2)
correlation=cor$estimate
correlation
cor = cor.test(regul,cible2)
correlation=cor$estimate
correlation
View(cor)
regul= rnorm(100)
cible1 = regul*3 + rnorm(1)
cible2 = regul*-4 + rnorm(1)
cor = cor.test(cible1,cible2)
correlation=cor$estimate
solve(cor(marks))
edgeList= solve(cor(marks))
cereGraph = graph_from_edgelist(edgeList, directed = F)
library(igraph)
cereGraph = graph_from_edgelist(edgeList, directed = F)
4
plot.igraph(edgeList, vertex.color = "red", vertex.size = 5, vertex.label = NA,
arrow.size = 0.1, edge.color = "grey",)
edgeList
graph(edgeList)
qnorm(0.95,0,1)
qnorm(0.05,0,1)
qnorm(1-(0.05/2),0,1)
setwd("~/")
setwd("C:\Users\julia\git\RNA-fold")
setwd("C:/Users/julia/git/RNA-fold")
data <- read.table("data.txt", sep = " ", header = F)
setwd("C:/Users/julia/git/RNA-fold")
data <- read.table("DataRfam.txt", sep = " ", header = F)
data <- read.table("DataRfam.txt", sep = " ", header = F)
data <- read.table("DataRfam.txt", sep = " ", header = FALSE)
data <- read.table("DataRfam.txt", sep = " ", header = FALSE)
data <- read.table("DataRfam.csv", sep = " ", header = FALSE)
data <- read.table("DataRfam.csv", sep = ";", header = FALSE)
data <- read.table("DataRfam.csv", sep = ";", header = T)
data <- read.table("DataRfam.csv", sep = ";", header = T)
data <- read.table("DataRfam.csv", sep = ";", header = T)
library(readr)
DataRfam <- read_delim("DataRfam.csv", ";",
escape_double = FALSE, trim_ws = TRUE)
View(DataRfam)
data= Datarfam$Column1
data= DataRfam$Column1
data= DataRfam$Column1
write.list(data,"data")
library(ere)
library(erer)
data= DataRfam$Column1
sink("data.txt")
print(data)
sink()
